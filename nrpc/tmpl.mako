# This file is automatically generated from ${fd.name}, DO NOT EDIT!

import asyncio
import nats.aio

import nrpc
import nrpc_pb2

% for mod, alias in g.extra_imports():
import ${mod} as ${alias}
% endfor


PKG_SUBJECT = '${g.get_pkg_subject(fd)}'
PKG_SUBJECT_PARAMS = [${', '.join("'%s'" % p for p in g.get_pkg_params(fd))}]
PKG_SUBJECT_PARAMS_COUNT = ${len(g.get_pkg_params(fd))}
% for sd in fd.service:


${sd.name}_SUBJECT = '${g.get_svc_subject(sd)}'
${sd.name}_SUBJECT_PARAMS = [${', '.join("'%s'" % p for p in g.get_svc_params(sd))}]
${sd.name}_SUBJECT_PARAMS_COUNT = ${len(g.get_svc_params(sd))}


class ${sd.name}Handler:
    methods = {
    % for md in sd.method:
        '${g.get_mt_subject(md)}': ('${md.name}', ${len(g.get_mt_params(md))}, ${g.get_type(md.input_type)}),
    % endfor
    }

    def __init__(self, nc, server):
        self.nc = nc
        self.subject = (
            (PKG_SUBJECT + '.' if PKG_SUBJECT else '') +
            '*.' * PKG_SUBJECT_PARAMS_COUNT +
            ${sd.name}_SUBJECT + '.' +
            '*.' * ${sd.name}_SUBJECT_PARAMS_COUNT +
            '>'
        )
        self.server = server

    @asyncio.coroutine
    def handler(self, msg):
        try:
            pkg_params, svc_params, mt_subject, tail = nrpc.parse_subject(
                PKG_SUBJECT, PKG_SUBJECT_PARAMS_COUNT,
                ${sd.name}_SUBJECT, ${sd.name}_SUBJECT_PARAMS_COUNT,
                msg.subject)

            mname, params_count, input_type = self.methods[mt_subject]
            mt_params, count = nrpc.parse_subject_tail(params_count, tail)

            req = input_type.FromString(msg.data)
            method = getattr(self.server, mname)
            mt_params.append(req)
            rep = method(*mt_params)
            rawRep = rep.SerializeToString()
            yield from self.nc.publish(msg.reply, rawRep)
        except Exception as e:
            print("Error in handler:", e)


class ${sd.name}Client:
    def __init__(
        self, nc,
        % for p in g.get_pkg_params(fd):
        pkg_${p},
        % endfor
        % for p in g.get_svc_params(sd):
        svc_${p},
        % endfor
    ):
        self.nc = nc
        % for p in g.get_pkg_params(fd):
        self.pkg_${p} = pkg_${p}
        % endfor
        % for p in g.get_svc_params(sd):
        self.svc_${p} = svc_${p}
        % endfor
    % for md in sd.method:

    @asyncio.coroutine
    def ${md.name}(
        self,
        % for p in g.get_mt_params(md):
        ${p},
        % endfor
        req,
    ):
        subject = PKG_SUBJECT + '.' + \
% for p in g.get_pkg_params(fd):
self.pkg_${p} + '.' + \
% endfor
${sd.name}_SUBJECT + '.' + \
% for p in g.get_svc_params(sd):
self.svc_${p} + '.' + \
% endfor
'${g.get_mt_subject(md)}'\
% for p in g.get_mt_params(md):
 + '.' + ${p}\
% endfor

        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data[0] == 0:
            return nrpc_pb2.Error.FromString(rawRep.data[1:])
        return ${g.get_type(md.output_type)}.FromString(rawRep.data)
    % endfor
% endfor # sd in fd.service
