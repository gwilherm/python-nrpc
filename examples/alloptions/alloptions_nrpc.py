# This file is automatically generated from alloptions.proto, DO NOT EDIT!

import asyncio
import nats.aio

import nrpc
import nrpc.exc
from nrpc import nrpc_pb2

import nrpc.nrpc_pb2 as nrpc_dot_nrpc__pb2
import alloptions_pb2 as alloptions__pb2


PKG_SUBJECT = 'root'
PKG_SUBJECT_PARAMS = ['instance']
PKG_SUBJECT_PARAMS_COUNT = 1


SvcCustomSubject_SUBJECT = 'custom_subject'
SvcCustomSubject_SUBJECT_PARAMS = []
SvcCustomSubject_SUBJECT_PARAMS_COUNT = 0


class SvcCustomSubjectHandler:
    methods = {
        'mt_simple_reply': ('MtSimpleReply', 0, alloptions__pb2.StringArg),
        'mtvoidreply': ('MtVoidReply', 0, alloptions__pb2.StringArg),
        'mtnorequest': ('MtNoRequest', 0, nrpc_dot_nrpc__pb2.NoRequest),
        'mtstreamedreply': ('MtStreamedReply', 0, alloptions__pb2.StringArg),
        'mtvoidreqstreamedreply': ('MtVoidReqStreamedReply', 0, nrpc_dot_nrpc__pb2.Void),
    }

    def __init__(self, nc, server):
        self.nc = nc
        self.server = server

    def subject(self, pkg_instance='*', method='>'):
        return '.'.join([
            "root", pkg_instance, SvcCustomSubject_SUBJECT, method
        ])

    @asyncio.coroutine
    def handler(self, msg):
        try:
            pkg_params, svc_params, mt_subject, tail = nrpc.parse_subject(
                PKG_SUBJECT, PKG_SUBJECT_PARAMS_COUNT,
                SvcCustomSubject_SUBJECT, SvcCustomSubject_SUBJECT_PARAMS_COUNT,
                msg.subject)

            mname, params_count, input_type = self.methods[mt_subject]
            mt_params, count = nrpc.parse_subject_tail(params_count, tail)

            req = input_type.FromString(msg.data)
            method = getattr(self.server, mname)
            mt_params.append(req)
            err = None
            try:
                rep = yield from method(*mt_params)
            except nrpc.ClientError as e:
                err = e.as_nrpc_error()
            except Exception as e:
                err = nrpc.exc.server_error(e)
            else:
                if isinstance(rep, nrpc.ClientError):
                    err = rep
            if err is not None:
                rawRep = b'\x00' + err.SerializeToString()
            elif rep is not None:
                rawRep = rep.SerializeToString()
            else:
                rawRep = b''
            yield from self.nc.publish(msg.reply, rawRep)
        except Exception as e:
            import traceback; traceback.print_exc()
            print("Error in SvcCustomSubject.%s handler:" % mname, e)


class SvcCustomSubjectClient:
    def __init__(
        self, nc,
        pkg_instance,
    ):
        self.nc = nc
        self.pkg_instance = pkg_instance

    @asyncio.coroutine
    def MtSimpleReply(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcCustomSubject_SUBJECT + '.' + 'mt_simple_reply'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)

    @asyncio.coroutine
    def MtVoidReply(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcCustomSubject_SUBJECT + '.' + 'mtvoidreply'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        if len(rawRep.data):
            raise ValueError("Received a non-empty response")
        return None

    @asyncio.coroutine
    def MtNoRequest(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcCustomSubject_SUBJECT + '.' + 'mtnorequest'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)

    @asyncio.coroutine
    def MtStreamedReply(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcCustomSubject_SUBJECT + '.' + 'mtstreamedreply'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)

    @asyncio.coroutine
    def MtVoidReqStreamedReply(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcCustomSubject_SUBJECT + '.' + 'mtvoidreqstreamedreply'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)


SvcSubjectParams_SUBJECT = 'svcsubjectparams'
SvcSubjectParams_SUBJECT_PARAMS = ['clientid']
SvcSubjectParams_SUBJECT_PARAMS_COUNT = 1


class SvcSubjectParamsHandler:
    methods = {
        'mtwithsubjectparams': ('MtWithSubjectParams', 2, nrpc_dot_nrpc__pb2.Void),
        'mtnoreply': ('MtNoReply', 0, nrpc_dot_nrpc__pb2.Void),
        'mtnorequestwparams': ('MtNoRequestWParams', 1, nrpc_dot_nrpc__pb2.NoRequest),
    }

    def __init__(self, nc, server):
        self.nc = nc
        self.server = server

    def subject(self, pkg_instance='*', svc_clientid='*', method='>'):
        return '.'.join([
            "root", pkg_instance, SvcSubjectParams_SUBJECT, svc_clientid, method
        ])

    @asyncio.coroutine
    def handler(self, msg):
        try:
            pkg_params, svc_params, mt_subject, tail = nrpc.parse_subject(
                PKG_SUBJECT, PKG_SUBJECT_PARAMS_COUNT,
                SvcSubjectParams_SUBJECT, SvcSubjectParams_SUBJECT_PARAMS_COUNT,
                msg.subject)

            mname, params_count, input_type = self.methods[mt_subject]
            mt_params, count = nrpc.parse_subject_tail(params_count, tail)

            req = input_type.FromString(msg.data)
            method = getattr(self.server, mname)
            mt_params.append(req)
            err = None
            try:
                rep = yield from method(*mt_params)
            except nrpc.ClientError as e:
                err = e.as_nrpc_error()
            except Exception as e:
                err = nrpc.exc.server_error(e)
            else:
                if isinstance(rep, nrpc.ClientError):
                    err = rep
            if err is not None:
                rawRep = b'\x00' + err.SerializeToString()
            elif rep is not None:
                rawRep = rep.SerializeToString()
            else:
                rawRep = b''
            yield from self.nc.publish(msg.reply, rawRep)
        except Exception as e:
            import traceback; traceback.print_exc()
            print("Error in SvcSubjectParams.%s handler:" % mname, e)


class SvcSubjectParamsClient:
    def __init__(
        self, nc,
        pkg_instance,
        svc_clientid,
    ):
        self.nc = nc
        self.pkg_instance = pkg_instance
        self.svc_clientid = svc_clientid

    @asyncio.coroutine
    def MtWithSubjectParams(
        self,
        mp1,
        mp2,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcSubjectParams_SUBJECT + '.' + self.svc_clientid + '.' + 'mtwithsubjectparams' + '.' + mp1 + '.' + mp2
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)

    @asyncio.coroutine
    def MtNoReply(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcSubjectParams_SUBJECT + '.' + self.svc_clientid + '.' + 'mtnoreply'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return nrpc_dot_nrpc__pb2.NoReply.FromString(rawRep.data)

    @asyncio.coroutine
    def MtNoRequestWParams(
        self,
        mp1,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + SvcSubjectParams_SUBJECT + '.' + self.svc_clientid + '.' + 'mtnorequestwparams' + '.' + mp1
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)


NoRequestService_SUBJECT = 'norequestservice'
NoRequestService_SUBJECT_PARAMS = []
NoRequestService_SUBJECT_PARAMS_COUNT = 0


class NoRequestServiceHandler:
    methods = {
        'mtnorequest': ('MtNoRequest', 0, nrpc_dot_nrpc__pb2.NoRequest),
    }

    def __init__(self, nc, server):
        self.nc = nc
        self.server = server

    def subject(self, pkg_instance='*', method='>'):
        return '.'.join([
            "root", pkg_instance, NoRequestService_SUBJECT, method
        ])

    @asyncio.coroutine
    def handler(self, msg):
        try:
            pkg_params, svc_params, mt_subject, tail = nrpc.parse_subject(
                PKG_SUBJECT, PKG_SUBJECT_PARAMS_COUNT,
                NoRequestService_SUBJECT, NoRequestService_SUBJECT_PARAMS_COUNT,
                msg.subject)

            mname, params_count, input_type = self.methods[mt_subject]
            mt_params, count = nrpc.parse_subject_tail(params_count, tail)

            req = input_type.FromString(msg.data)
            method = getattr(self.server, mname)
            mt_params.append(req)
            err = None
            try:
                rep = yield from method(*mt_params)
            except nrpc.ClientError as e:
                err = e.as_nrpc_error()
            except Exception as e:
                err = nrpc.exc.server_error(e)
            else:
                if isinstance(rep, nrpc.ClientError):
                    err = rep
            if err is not None:
                rawRep = b'\x00' + err.SerializeToString()
            elif rep is not None:
                rawRep = rep.SerializeToString()
            else:
                rawRep = b''
            yield from self.nc.publish(msg.reply, rawRep)
        except Exception as e:
            import traceback; traceback.print_exc()
            print("Error in NoRequestService.%s handler:" % mname, e)


class NoRequestServiceClient:
    def __init__(
        self, nc,
        pkg_instance,
    ):
        self.nc = nc
        self.pkg_instance = pkg_instance

    @asyncio.coroutine
    def MtNoRequest(
        self,
        req,
    ):
        subject = PKG_SUBJECT + '.' + self.pkg_instance + '.' + NoRequestService_SUBJECT + '.' + 'mtnorequest'
        rawReq = req.SerializeToString()
        rawRep = yield from self.nc.timed_request(subject, rawReq, 5)
        if rawRep.data and rawRep.data[0] == 0:
            raise nrpc.exc.from_error(
                nrpc_pb2.Error.FromString(rawRep.data[1:]))
        return alloptions__pb2.SimpleStringReply.FromString(rawRep.data)
